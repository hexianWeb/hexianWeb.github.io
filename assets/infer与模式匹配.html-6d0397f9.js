import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,e as l,a as n,b as s,f as r,d as a}from"./app-fd3589d7.js";const i={},k=n("p",null,[n("code",null,"infer"),s(" 关键字是 TypeScript 中用于条件类型中的关键字，用于从条件类型中提取类型信息，实现更加灵活和强大的类型操作。它的应用场景涵盖了从函数返回值类型、数组元素类型到对象属性合并等多个方面。")],-1),d=a(`<h2 id="infer-概念" tabindex="-1"><a class="header-anchor" href="#infer-概念" aria-hidden="true">#</a> infer 概念</h2><p><code>infer</code> 是 TypeScript 中用于**条件类型（Conditional Types）**中的关键字。条件类型是一种在类型系统中进行条件判断的高级技术，而 <code>infer</code> 则用于从条件类型中提取类型信息。</p><p>具体来说，<code>infer</code> 关键字<strong>用于从泛型类型参数中提取具体的类型。它允许在条件类型中<span style="color:red;">推断出类型参数的类型</span></strong>，并将其作为结果返回。这在一些复杂的类型操作中非常有用，可以实现更加灵活和强大的类型推导和转换。</p><p><em>真是一段晦涩难懂的文字！是不是写这玩意的都不爱说人话？！</em></p><p>确实，初看这一段文字只有一种不明觉厉，知识传过光滑的脑袋的感觉。那么让我依次从前置知识、基本使用、具体应用场景三个方面来向您介绍 <code>infer</code></p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><h3 id="条件类型" tabindex="-1"><a class="header-anchor" href="#条件类型" aria-hidden="true">#</a> 条件类型</h3><p>条件类型（Conditional Types）是 TypeScript 中的一种高级类型，它允许根据某个类型关系的条件成立与否来进行类型转换和选择。条件类型可以让我们在类型系统中进行逻辑判断，从而实现更加复杂和灵活的类型操作。</p><p>它的基本形式是</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是一种很常见的 <strong>根据某个类型关系的条件成立与否来进行类型转换和选择</strong>的方式。</p>`,11),u={href:"https://www.typescriptlang.org/play",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token string">&#39;hexianWeb&#39;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时 IDE 推导出 <code>type Result = true</code></p><p>那么反过来，如果是<code> 123 extends string</code> 则会被推导 <code>type Result = false</code>。 这就是条件类型，<strong>根据某个类型关系的条件是否成立来选择类型。</strong></p><h2 id="初识-infer-关键字" tabindex="-1"><a class="header-anchor" href="#初识-infer-关键字" aria-hidden="true">#</a> 初识 infer 关键字</h2><p>那么让我们来继续延伸“条件类型”这个话题。很多时候我们的判断条件与期望转换的类型并不是写死的，这就需要借助泛型来做到参数化类型的目的。比如一开始的例子可以写成以下形式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">hexianString</span> <span class="token operator">=</span> Result<span class="token operator">&lt;</span><span class="token string">&#39;hexian&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这只是在简单情况下，多数场景我们可能会面临<strong>拿到的类型是判断类型的一部分</strong>，而不是简简单单的将类型全部返回</p><p>比如我希望得到一个类型数组的第一个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">typeArray</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但泛型做为一个整体要提取其中一部分信息是很麻烦的，这时 TypeScript 给与我们 infer 关键字来<strong>在条件类型中提取类型的某一部分信息</strong>。</p><p>以下是取得类型数组的第一个类型的实例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GetFirst<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
    Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> First <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span> 
<span class="token keyword">type</span> <span class="token class-name">FirstElementType</span> <span class="token operator">=</span> GetFirst<span class="token operator">&lt;</span>MyArray<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">//推导出 type FirstElementType = number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中你可以看到，你不需要去指定 First 是什么类型 <code>infer</code> 关键字会自己根据参数化类型推断出该元素的类型。</p><p>它分解了类型参数 <code>MyArray</code> 并推导得出 <code>First</code> 类型为<code>number</code> 最后返回结果。</p><h2 id="infer-的具体应用场景" tabindex="-1"><a class="header-anchor" href="#infer-的具体应用场景" aria-hidden="true">#</a> infer 的具体应用场景</h2><p>我们现在知道 <code>infer</code>主要作用是用来从某个泛型整体要提取并返回其中一部分信息。那么他的应用场大部分可分为以下几种</p><h3 id="操作-or-提取数组元素类型" tabindex="-1"><a class="header-anchor" href="#操作-or-提取数组元素类型" aria-hidden="true">#</a> <strong>操作 or 提取数组元素类型</strong></h3><h4 id="提取数组元素类型" tabindex="-1"><a class="header-anchor" href="#提取数组元素类型" aria-hidden="true">#</a> 提取数组元素类型</h4><p>比如本章提到的取得第一或最后一个元素</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyArray</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">GetFirst<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
    Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> First <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">GetLast<span class="token operator">&lt;</span>Arr <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
    Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> Last<span class="token punctuation">]</span> <span class="token operator">?</span> Last <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">FirstElementType</span> <span class="token operator">=</span> GetFirst<span class="token operator">&lt;</span>MyArray<span class="token operator">&gt;</span><span class="token punctuation">;</span> 
<span class="token keyword">type</span> <span class="token class-name">LastElementType</span> <span class="token operator">=</span> GetLast<span class="token operator">&lt;</span>MyArray<span class="token operator">&gt;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作数组元素类型" tabindex="-1"><a class="header-anchor" href="#操作数组元素类型" aria-hidden="true">#</a> 操作数组元素类型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Swap<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">B</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">SwapResult</span> <span class="token operator">=</span> Swap<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 符合元组结构，首尾元素替换[2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（tips：infer 自由度比你想象的要高, 他可以实现以下写法）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 调换首尾两个</span>
<span class="token keyword">type</span> <span class="token class-name">SwapStartAndEnd<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>
  <span class="token keyword">infer</span> Start<span class="token punctuation">,</span>
  <span class="token operator">...</span><span class="token keyword">infer</span> Left<span class="token punctuation">,</span>
  <span class="token keyword">infer</span> End
<span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span>End<span class="token punctuation">,</span> <span class="token operator">...</span>Left<span class="token punctuation">,</span> Start<span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取函数返回值类型" tabindex="-1"><a class="header-anchor" href="#提取函数返回值类型" aria-hidden="true">#</a> <strong>提取函数返回值类型</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">MyFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>MyFunc<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Result 是 string 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取对象的属性类型" tabindex="-1"><a class="header-anchor" href="#提取对象的属性类型" aria-hidden="true">#</a> 提取对象的属性类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token punctuation">}</span>
  <span class="token operator">?</span> <span class="token constant">R</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">PropTypeResult1</span> <span class="token operator">=</span> PropType<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name">PropTypeResult2</span> <span class="token operator">=</span> PropType<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这篇文章对 <code>infer</code> 关键字进行了全面的介绍，从前置知识、基本使用，到具体的应用场景都进行了阐述。通过深入了解 <code>infer</code>，我们可以更好地理解 TypeScript 中复杂的类型操作，为我们的代码提供更多的灵活性和安全性。</p>`,30);function y(v,b){const e=t("ExternalLinkIcon");return o(),c("div",null,[k,l(" more "),d,n("p",null,[s("您可以现在 TypeScript 的 "),n("a",u,[s("playGround"),r(e)]),s(" 输入")]),m])}const w=p(i,[["render",y],["__file","infer与模式匹配.html.vue"]]);export{w as default};
