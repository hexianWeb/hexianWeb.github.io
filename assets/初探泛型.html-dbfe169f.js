import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as t,a as s,b as p,d as o}from"./app-0c868cee.js";const c={},l=s("p",null,[s("code",null,"more"),p(" TypeScript 中的泛型是一种强大的工具，它允许您在定义函数、类或接口时不指定具体的数据类型，而是将类型作为参数传递，以在使用时确定具体的类型。泛型使您能够编写更通用、可复用的代码，同时保持类型安全性。")],-1),i=o(`<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h1><h2 id="泛型的概念" tabindex="-1"><a class="header-anchor" href="#泛型的概念" aria-hidden="true">#</a> 泛型的概念</h2><p>TypeScript 中的泛型是一种强大的工具，它允许您在定义函数、类或接口时不指定具体的数据类型，而是将类型作为参数传递，以在使用时确定具体的类型。泛型使您能够编写更通用、可复用的代码，同时保持类型安全性。</p><p>泛型的概念可以类比为参数化类型，就像函数可以接受参数一样，泛型允许您传递类型作为参数。</p><p><strong>这段概念真的太空了不是吗？真的有人会靠这玩意学东西？</strong></p><h2 id="真的有必要用泛型吗" tabindex="-1"><a class="header-anchor" href="#真的有必要用泛型吗" aria-hidden="true">#</a> 真的有必要用泛型吗？</h2><p>还是让我们从实际应用场景开始学习。</p><blockquote><p>场景：你有一个用于更新用户信息的 Dialog，但现在你手中只有以下类型以及代码</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	sex<span class="token operator">:</span> <span class="token string">&#39;man&#39;</span><span class="token operator">|</span><span class="token string">&#39;woman&#39;</span><span class="token punctuation">,</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateUserInfo</span><span class="token punctuation">(</span>updateParams<span class="token operator">:</span> <span class="token string">&#39;这里填写什么类型好呢&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> LoginAPI<span class="token punctuation">.</span>updateUserInfo<span class="token punctuation">,</span>
    data<span class="token operator">:</span> params
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里填写什么类型好呢?</p><p>如果填写 <code>User</code>，那么更新时会要求<code>UserInfo</code>所有属性都应该存在。而实际上用户只会更新想更新的那部分信息。你也不应该在更新时发送所有的用户信息，即使有些信息是没有改变的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> updateParams <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 想这样</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那怎么办？哑巴吃黄连，为了完成这个目的，你只能创建一个新的类型，用于更新数据。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UpdateUser</span> <span class="token punctuation">{</span>
	name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
	age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	sex<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;man&#39;</span><span class="token operator">|</span><span class="token string">&#39;woman&#39;</span><span class="token punctuation">,</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时也庆幸这个类型的属性比较少，不然打<code>可选符</code>需要花费一天的时间。但是每次都有这么幸运么。。。。</p><p>随后你了解到 TypeScript 的内置工具类型 <strong>Partial</strong>。工具类型 Partial 会将传入的对象类型复制一份，但会额外添加一个<code>?</code></p><p>一句简简单单的<code>type UpdateUser = Partial&lt;User&gt;;</code>就解决了上述问题。</p><p>为了一探究竟，您点开了 Partial 工具类型实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随着一声苦笑，顿时就明白了泛型的重要性，这段代码太简单了。</p><ul><li><code>Partial&lt;T&gt;</code>：这是一个泛型类型的定义，表示将传入的类型 <code>T</code> 的属性都转换为可选属性。</li><li><code>[P in keyof T]?</code>：这是一个映射类型的语法，它表示对类型 <code>T</code> 的每个属性 <code>P</code> 进行遍历。<code>keyof T</code> 是 TypeScript 中的索引类型查询操作符，用于获取类型 <code>T</code> 的所有属性名称。</li><li><code>T[P]</code>：表示属性 <code>P</code> 在类型 <code>T</code> 中的类型。</li><li><code>?:</code>：这是 TypeScript 中的可选属性语法，表示属性可以不必存在。</li></ul><p>所以，当你使用 <code>Partial&lt;T&gt;</code> 类型时，它会将传入的类型 <code>T</code> 的每个属性变为可选属性，从而创建一个新的类型，该类型的每个属性都可以不设置或设置为 <code>undefined</code>。</p><p>这也是泛型那段<code>枯燥无味的概念</code>想要告诉你的：<strong>泛型使您能够编写更通用、可复用的代码，同时保持类型安全性。</strong></p><h2 id="泛型的用法" tabindex="-1"><a class="header-anchor" href="#泛型的用法" aria-hidden="true">#</a> 泛型的用法</h2><h3 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h3><p><span style="color:red;">使用 <code>extends</code> 关键字限制泛型参数的类型范围，确保传递的值满足某些条件。</span></p><p>场景一：如果您需要在应用中处理多个具有类似属性的对象。比如在处理字符串和数组时，经常需要获取它们的长度。但他们明显不允许被推导为同一类型。就可以采用以下方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getLength</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stringLength <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stringLength 是 5</span>
<span class="token keyword">const</span> arrayLength <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arrayLength 是 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景二：有时向后端请求数据时会返回请求状态码，通常为数字字面量集合。这时我们通过 <code>extends number</code> 来标明其类型约束，如果传入一个不合法的值，就会出现类型错误</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ResStatus<span class="token operator">&lt;</span>ResCode <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> ResCode <span class="token keyword">extends</span> <span class="token number">10000</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">10002</span>
  <span class="token operator">?</span> <span class="token string">&quot;success&quot;</span>
  <span class="token operator">:</span> <span class="token string">&quot;failure&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Res1</span> <span class="token operator">=</span> ResStatus<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;success&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Res2</span> <span class="token operator">=</span> ResStatus<span class="token operator">&lt;</span><span class="token number">20000</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;failure&quot;</span>

<span class="token keyword">type</span> <span class="token class-name">Res3</span> <span class="token operator">=</span> ResStatus<span class="token operator">&lt;</span><span class="token string">&quot;10000&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 类型“string”不满足约束“number”。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>额外补充</strong></p><p><code>extends</code> 是一种类型关系判断操作符，用于判断一个类型是否继承自另一个类型，或者一个类型是否满足某个条件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token string">&#39;hexianWeb&#39;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 <code>&#39;hexianWeb&#39;</code>属于 String 字面量类型， 是 <code>string</code> 类型的子类型。所以当您将上述代码输入 IDE 后， IDE 会推导出 <code>type Result =true</code>这一条信息。这一用途在后面介绍 <code>infer</code> 关键字时也会强调。</p><hr><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><p><span style="color:red;">它可以像函数可以声明一个参数的默认值一样，泛型同样有着默认值的设定</span></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Factory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样在你调用时就可以不带任何参数了，默认会使用声明的默认值来填充。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> foo<span class="token operator">:</span> Factory <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型函数" tabindex="-1"><a class="header-anchor" href="#泛型函数" aria-hidden="true">#</a> 泛型函数</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, TypeScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// result 的类型为 string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>&lt;T&gt;</code> 表示泛型参数，可以传递任意类型。函数 <code>identity</code> 接受一个参数 <code>arg</code>，并将其返回，保持了输入和输出的类型一致。</p><hr><p><strong>额外补充</strong></p><p>当我们调用某个泛型函数时，如果函数有多个参数且都引用了泛型参数 T ，此时泛型会被填充为一个联合类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">599</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// T 填充为 599 | 1</span>
<span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;599&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// T 填充为 linbudu | 599</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来很符合直觉不是吗？ T 不仅要是字面量类型 <code>599</code> 还要是 字面量类型 <code>1</code>。结果填充为 <code>599|1</code></p><hr><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类" aria-hidden="true">#</a> 泛型类</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Box<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> numberBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// numberBox 的 value 是 number 类型</span>
<span class="token keyword">const</span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stringBox 的 value 是 string 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Box</code> 是一个泛型类，它可以接受任意类型的值，并将其保存在 <code>value</code> 属性中。</p><h3 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口" aria-hidden="true">#</a> 泛型接口</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Pair<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  second<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pair<span class="token operator">:</span> Pair<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型接口允许您定义一个可以适用于多个类型的接口，可以在创建对象时指定具体的类型参数。</p><h1 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h1><p>希望您注意的是，不要为了用泛型而用泛型，一切为了降低自身的心智模型负担！帮助 TypeScript 获取更好的类型推导只是其中的一个方式而已。</p>`,58);function r(u,d){return a(),e("div",null,[l,t(" more "),i])}const m=n(c,[["render",r],["__file","初探泛型.html.vue"]]);export{m as default};
