import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as e,c as o,e as u,a as s,b as n,f as i,w as l,d as a}from"./app-fd3589d7.js";const k={},d=s("p",null,[s("code",null,"more"),n(" 本章讲解结构化类型系统（Structural Type System）")],-1),r=a(`<h2 id="什么是鸭子类型" tabindex="-1"><a class="header-anchor" href="#什么是鸭子类型" aria-hidden="true">#</a> 什么是鸭子类型？</h2><p>鸭子类型（Duck Typing）是一种动态类型语言的概念，它强调对象的行为（方法和属性）比实际类型更重要。鸭子类型的基本思想是，只要一个对象具有与所需的操作相匹配的方法和属性，那么它就可以被视为符合所需的类型，即使它的实际类型并不相同。</p><p>鸭子类型的名字来自于一句俚语：“如果它走起路来像只鸭子，叫起声来也像只鸭子，那么它就是只鸭子。”这句话强调的是，对象的行为决定了它的类型，而不是继承关系或显式的类型声明。</p><h3 id="javascript-里的鸭子类型" tabindex="-1"><a class="header-anchor" href="#javascript-里的鸭子类型" aria-hidden="true">#</a> JavaScript 里的鸭子类型</h3><p>从 JavaScript 迁移的小伙伴都知道在 JavaScript 中，如果一个对象具有与所需操作相匹配的方法和属性，那么它就可以被视为符合所需的类型，即使它的实际类型并不相同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 鸭子类型示例</span>
<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token parameter">duck</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>duck <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> duck<span class="token punctuation">.</span>quack <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> realDuck <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">quack</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Quack!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> toyDuck <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">quack</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Squeak!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">quack</span><span class="token punctuation">(</span>realDuck<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;Quack!&quot;</span>
<span class="token function">quack</span><span class="token punctuation">(</span>toyDuck<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;Squeak!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript-里的-鸭子类型" tabindex="-1"><a class="header-anchor" href="#typescript-里的-鸭子类型" aria-hidden="true">#</a> TypeScript 里的 &quot; 鸭子类型 &quot;</h3><p>但对于特殊的 <code>TypeScript</code> 来说，直觉告诉你这是一段不对的代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">realDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">toyDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span>duck<span class="token operator">:</span> realDuck<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">quack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">toyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而当这段代码进入 IDE ，你得到的仅仅只是一句<code>&#39;duck&#39; is declared but its value is never read.</code>。没有类型错误 &amp; 爆红。有的只是一脸懵逼的你。</p>`,10),v=s("code",null,"in",-1),m=s("strong",null,"可辨识属性（Discriminant Property 或 Tagged Property）",-1),b=s("strong",null,"标称类型系统",-1),y=s("strong",null,"结构化类型系统",-1),f=a(`<p>所以要让 <code>duck: realDuck</code> 这段类型限制起作用也很简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">realDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 加一个 可辨识属性 就好啦</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">toyDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span>duck<span class="token operator">:</span> realDuck<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">quack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">toyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这里又会涉及到另一种情况 ( 都是加可辨识属性，加哪不是加？)：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">realDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">toyDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//加可辨识属性</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span>duck<span class="token operator">:</span> realDuck<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">quack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">toyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型匹配 √</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时的 <code>toyDuck</code> 会被认为是 <code>realDuck</code> 的子类，前者继承了后者并增加了一个方法。而 TypeScript 也遵循 里氏替换原则（Liskov Substitution Principle，LSP）即<strong>如果 S 是 T 的一个子类型，那么类型 T 的对象可以被类型 S 的对象替换（或者说可以使用类型 S 的对象代替类型 T 的对象），而不需要影响程序的正确性。</strong></p><p>**最后你需要注意的是，在比较对象类型的属性与方法时，同样存在类型的兼容性比较。**他不像 JavaScript 一样，你只要能<code>鸭叫</code>出声就行。他还需要你能<code>发出同一品种的叫声</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">realDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">toyDuck</span> <span class="token punctuation">{</span>
  <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span>duck<span class="token operator">:</span> realDuck<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">quack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">toyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型匹配 ×</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>这里短暂科普以下两者的区别：</p><p><strong>标称类型系统（Nominal Type System）</strong>：</p><p>在标称类型系统中，<strong>类型的相等性和兼容性是基于类型的名称或标识符来判断的</strong>。即使两个类型的结构相同，但如果它们的名称不同，它们仍被视为不同的类型。这意味着只有显式声明为相同名称的类型才被认为是相等的。</p><p><strong>结构化类型系统（Structural Type System）</strong>：</p><p>在结构化类型系统中，类型的相等性和兼容性是基于类型的结构和成员来判断的。如果两个类型具有相同的属性和方法，即使它们的名称不同，它们仍被视为相同的类型。这意味着可以更灵活地处理不同名称的类型，只要它们的结构相似。</p><p>如果同学有心去尝试<code>realDuck &amp; toyDuck</code>代码在 Java 中，会得到<em>根据标称类型系统的原则，代码中的 <code>quack(new toyDuck());</code> 是不成立的。因为 <code>quack</code> 函数期望接受一个参数类型为 <code>realDuck</code> 的对象，而传递给它的是一个类型为 <code>toyDuck</code> 的对象，两者的类型不匹配。这样一个结论</em></p><hr>`,15);function g(q,h){const t=c("RouterLink");return e(),o("div",null,[d,u(" more "),r,s("p",null,[n("这时的你回想起在 "),i(t,{to:"/typeScript/%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC.html"},{default:l(()=>[n("类型推导，让类型趋于明确")]),_:1}),n(" 一章中 "),v,n(" 关键字起到类型推导作用的核心是"),m,n("。没错，这里也侧面印证了 TypeScript 并非像 Java 和 C# 使用"),b,n("，而是采用的"),y,n("。")]),f])}const D=p(k,[["render",g],["__file","结构化类型系统.html.vue"]]);export{D as default};
