import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as p,e as t,a as n,b as e,d as o}from"./app-fd3589d7.js";const c={},i=n("p",null,[n("code",null,"more"),e(" 本章讲解类型推导")],-1),l=o(`<h2 id="类型推导-让类型趋于明确" tabindex="-1"><a class="header-anchor" href="#类型推导-让类型趋于明确" aria-hidden="true">#</a> 类型推导，让类型趋于明确</h2><h3 id="is-关键字" tabindex="-1"><a class="header-anchor" href="#is-关键字" aria-hidden="true">#</a> is 关键字</h3><p>刚接触 TypeScript 的朋友可能时常遇到问题如，你不能将 <code>XXX</code> 类型赋予 <code>YYY</code>。或者 <code>Property &#39;x属性&#39; does not exist on type &#39;YYY&#39; </code>的报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 错误代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为在 TypeScript 中，当一个变量的类型被确定后，TypeScript 将会基于这个类型来做类型检查和类型推断。然而，在某些情况下，TypeScript 可能无法精确地确定变量的类型。</p><p><strong>这时你可能需要显式地告诉 TypeScript 变量的实际类型</strong></p><p>这就是类型推导,通过使用 <code>typeof</code> 检查，你可以在代码中显式地告诉 TypeScript，例如当变量的类型是 <code>string</code> 时，可以安全地访问 <code>length</code> 属性。这样，TypeScript 就能够根据你的断言，正确地进行类型推断和类型检查，避免出现错误。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> strOrNumOrBool<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 一定是字符串！</span>
  strOrNumOrBool<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 一定是数字！</span>
  strOrNumOrBool<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strOrNumOrBool <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 一定是布尔值！</span>
  strOrNumOrBool <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 要是走到这里就说明有问题！</span>
  <span class="token keyword">const</span> _exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> strOrNumOrBool<span class="token punctuation">;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unknown input type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_exhaustiveCheck<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述类型推导的简单应用可以应付一部分使用场景，但这不能发挥类型推导的全部功能。</p><blockquote><p>场景：您需要判断一个值是否为真/假值</p></blockquote><p>从简单应用的角度出发似乎你需要</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  input <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>
  input <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span>
  input <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>
  input <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>
  input <span class="token operator">===</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来难以扩展、且不太优雅不是吗？所以直觉告诉您需要将<code>判断逻辑封装起来提取到函数外部进行复用</code>。</p><p>于是您写出了这一段代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isFalsy</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    input <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFalsy</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  input<span class="token punctuation">;</span> <span class="token comment">// 此时鼠标指向input 发现静态推导出的类型是 unknown</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来不太妙！ 他根本就没起到任何约束作用。原来 TypeScript 中<strong>类型推导分析做不到跨函数上下文来进行类型的信息收集</strong>。</p><p>TypeScript 引入了 <strong>is 关键字</strong>来显式地提供类型信息。你可以通过<strong>is 关键字 + 预期类型</strong>来帮助类型推导</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isFalsy</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> input <span class="token keyword">is</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>
    input <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>
    input <span class="token operator">===</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFalsy</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时鼠标指向input 发现静态推导出的类型是 boolean</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是 is 关键字相关的类型推导将会无比信任你的设置。</p><p>例：以下的一段代码 return 的判断逻辑不会改变以进入 <code>if(isString(input))</code>条件分支里 input 的类型。你会得到一个</p><p>通过了<code>typeof input === &quot;string&quot;</code>，但类型是 <code>number </code>的分支环境。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> input <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    input<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;linbudu599&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property &#39;replace&#39; does not exist on type &#39;number&#39;.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof-关键字" tabindex="-1"><a class="header-anchor" href="#typeof-关键字" aria-hidden="true">#</a> typeof 关键字</h3><ol><li><p><strong>JavaScript 中的 typeof：</strong></p><p>在 JavaScript 中，<code>typeof</code> 返回一个字符串，表示操作数的基本类型。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>javascriptCopy codeconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;string&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出: &quot;number&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出: &quot;boolean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TypeScript 中的 typeof：</strong></p><p>在 TypeScript 中，<code>typeof</code> 用于类型检查和类型推断。它可以用于获取变量的静态类型，也可以用于判断变量的实际类型。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>typescriptCopy codeconst str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> strType<span class="token operator">:</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// 类型推断：strType 的类型为 &quot;string&quot;</span>
<span class="token keyword">let</span> numType<span class="token operator">:</span> <span class="token keyword">typeof</span> num<span class="token punctuation">;</span> <span class="token comment">// 类型推断：numType 的类型为 &quot;number&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，TypeScript 的 <code>typeof</code> 还支持类型保护，用于缩小联合类型的范围，从而在不同分支中得到不同的类型推断。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>typescriptCopy codefunction <span class="token function">printLength</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里，input 被 TypeScript 推断为 &quot;string&quot; 类型</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="in-关键字" tabindex="-1"><a class="header-anchor" href="#in-关键字" aria-hidden="true">#</a> in 关键字</h3><p><code>in</code>和<code>typeof</code>有着很奇妙的共同点，他们都并不是 TypeScript 中新增的概念，而是 JavaScript 中已有的部分。您在从 <code>js</code> 迁移到 <code>ts</code> 时。会觉得这种使用方式是很符合直觉的，这里也不做过多介绍。简单说一下他如何做到类型推导作用。</p><p>首先我么回想一下 in 的作用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">in</span> 操作符用于检查一个对象是否具有特定属性。它返回一个布尔值，表示属性是否存在于对象中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 JavaScript 里，我们会这样使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 TypeScript 中，<code>in</code> 操作符不仅可以用来检查属性是否存在，还可以用来进行类型推导、缩小联合类型的范围，从而更精确地推断变量的类型。而能让其发挥作用的，仅仅是一或多个<strong>可辨识属性（Discriminant Property 或 Tagged Property）</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里，TypeScript 推断 person 为 Person 类型</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里，TypeScript 推断 person 为 string 类型</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof-关键字" tabindex="-1"><a class="header-anchor" href="#instanceof-关键字" aria-hidden="true">#</a> instanceof 关键字</h3><blockquote><p>和前面两个‘前辈’ 一样，这里就不过多赘述了。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  species<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>species<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> species<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printNameOrSpecies</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Person <span class="token operator">|</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里，TypeScript 推断 obj 为 Person 类型</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里，TypeScript 推断 obj 为 Animal 类型</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><strong>is 关键字</strong></p><p><code>is</code> 关键字不是 TypeScript 中的原生关键字，但您在代码中使用 <code>is</code> 来结合类型守卫，可以在条件分支中明确地告诉 TypeScript 一个变量的具体类型。这有助于在特定分支中进行精确的类型推断和类型检查。</p><p><strong>typeof 关键字</strong></p><p><code>typeof</code> 关键字用于获取变量的数据类型，并且在 TypeScript 中可以用于类型检查和类型推断。您可以使用 <code>typeof</code> 关键字来获取变量的静态类型，或者用它来结合条件语句实现类型保护，缩小联合类型的范围，从而获得更准确的类型推断。</p><p><strong>in 关键字</strong></p><p><code>in</code> 关键字用于检查对象是否具有特定属性。在 TypeScript 中，您可以使用 <code>in</code> 关键字结合可辨识属性（Discriminant Property 或 Tagged Property）来进行类型推断，缩小联合类型的范围，从而根据属性的存在与否进行精确的类型判断。</p><p><strong>instanceof 关键字</strong></p><p><code>instanceof</code> 关键字用于检查对象是否是某个构造函数（或其派生构造函数）的实例。在 TypeScript 中，您可以使用 <code>instanceof</code> 关键字结合类型保护来进行更精确的类型推断，根据对象的实例关系判断变量的具体类型。</p><p>总的来说，这些关键字和技术在 TypeScript 中被用于不同的情境，可以帮助您在编写代码时实现更准确的类型推导和类型检查，从而提高代码质量和可维护性。</p>`,45);function u(r,k){return a(),p("div",null,[i,t(" more "),l])}const m=s(c,[["render",u],["__file","类型推导.html.vue"]]);export{m as default};
